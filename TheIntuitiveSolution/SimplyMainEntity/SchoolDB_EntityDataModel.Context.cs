//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SimplyMainEntity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SchoolDBEntities : DbContext
    {
        public SchoolDBEntities()
            : base("name=SchoolDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<DayTable> DayTables { get; set; }
        public virtual DbSet<Holding> Holdings { get; set; }
        public virtual DbSet<Major> Majors { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<Term> Terms { get; set; }
        public virtual DbSet<TimeBlock> TimeBlocks { get; set; }
    
        [DbFunction("SchoolDBEntities", "AllCourseInfo")]
        public virtual IQueryable<AllCourseInfo_Result> AllCourseInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AllCourseInfo_Result>("[SchoolDBEntities].[AllCourseInfo]()");
        }
    
        [DbFunction("SchoolDBEntities", "CourseInfo")]
        public virtual IQueryable<CourseInfo_Result> CourseInfo(Nullable<int> courseid)
        {
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<CourseInfo_Result>("[SchoolDBEntities].[CourseInfo](@courseid)", courseidParameter);
        }
    
        [DbFunction("SchoolDBEntities", "GetAllEnrolled")]
        public virtual IQueryable<GetAllEnrolled_Result> GetAllEnrolled()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllEnrolled_Result>("[SchoolDBEntities].[GetAllEnrolled]()");
        }
    
        [DbFunction("SchoolDBEntities", "GetAllPeople")]
        public virtual IQueryable<GetAllPeople_Result> GetAllPeople(Nullable<int> sorter)
        {
            var sorterParameter = sorter.HasValue ?
                new ObjectParameter("sorter", sorter) :
                new ObjectParameter("sorter", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllPeople_Result>("[SchoolDBEntities].[GetAllPeople](@sorter)", sorterParameter);
        }
    
        [DbFunction("SchoolDBEntities", "GetAllStudents")]
        public virtual IQueryable<GetAllStudents_Result> GetAllStudents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllStudents_Result>("[SchoolDBEntities].[GetAllStudents]()");
        }
    
        [DbFunction("SchoolDBEntities", "GetEnrolledStudents")]
        public virtual IQueryable<GetEnrolledStudents_Result> GetEnrolledStudents(Nullable<int> courseid)
        {
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEnrolledStudents_Result>("[SchoolDBEntities].[GetEnrolledStudents](@courseid)", courseidParameter);
        }
    
        [DbFunction("SchoolDBEntities", "GetInstructors")]
        public virtual IQueryable<GetInstructors_Result> GetInstructors(Nullable<int> courseid)
        {
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetInstructors_Result>("[SchoolDBEntities].[GetInstructors](@courseid)", courseidParameter);
        }
    
        [DbFunction("SchoolDBEntities", "GetPersonDetails")]
        public virtual IQueryable<GetPersonDetails_Result> GetPersonDetails(Nullable<int> personid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPersonDetails_Result>("[SchoolDBEntities].[GetPersonDetails](@personid)", personidParameter);
        }
    
        [DbFunction("SchoolDBEntities", "GrabSchedule")]
        public virtual IQueryable<GrabSchedule_Result> GrabSchedule(Nullable<int> personid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GrabSchedule_Result>("[SchoolDBEntities].[GrabSchedule](@personid)", personidParameter);
        }
    
        [DbFunction("SchoolDBEntities", "ShowAllClosed")]
        public virtual IQueryable<ShowAllClosed_Result> ShowAllClosed()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ShowAllClosed_Result>("[SchoolDBEntities].[ShowAllClosed]()");
        }
    
        [DbFunction("SchoolDBEntities", "ShowAllClosed2")]
        public virtual IQueryable<ShowAllClosed2_Result> ShowAllClosed2(Nullable<int> termid)
        {
            var termidParameter = termid.HasValue ?
                new ObjectParameter("termid", termid) :
                new ObjectParameter("termid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ShowAllClosed2_Result>("[SchoolDBEntities].[ShowAllClosed2](@termid)", termidParameter);
        }
    
        [DbFunction("SchoolDBEntities", "ShowAllOpen")]
        public virtual IQueryable<ShowAllOpen_Result> ShowAllOpen()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ShowAllOpen_Result>("[SchoolDBEntities].[ShowAllOpen]()");
        }
    
        [DbFunction("SchoolDBEntities", "ShowAllOpen2")]
        public virtual IQueryable<ShowAllOpen2_Result> ShowAllOpen2(Nullable<int> termid)
        {
            var termidParameter = termid.HasValue ?
                new ObjectParameter("termid", termid) :
                new ObjectParameter("termid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ShowAllOpen2_Result>("[SchoolDBEntities].[ShowAllOpen2](@termid)", termidParameter);
        }
    
        [DbFunction("SchoolDBEntities", "SummonHoldList")]
        public virtual IQueryable<SummonHoldList_Result> SummonHoldList(Nullable<int> personid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SummonHoldList_Result>("[SchoolDBEntities].[SummonHoldList](@personid)", personidParameter);
        }
    
        [DbFunction("SchoolDBEntities", "SummonSchedule")]
        public virtual IQueryable<SummonSchedule_Result> SummonSchedule(Nullable<int> personid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SummonSchedule_Result>("[SchoolDBEntities].[SummonSchedule](@personid)", personidParameter);
        }
    
        public virtual ObjectResult<string> Add2HoldList(Nullable<int> personid, Nullable<int> courseid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Add2HoldList", personidParameter, courseidParameter);
        }
    
        public virtual ObjectResult<string> AddClass2StudentSchedule(Nullable<int> personid, Nullable<int> courseid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AddClass2StudentSchedule", personidParameter, courseidParameter);
        }
    
        public virtual int AddInstructor(Nullable<int> personid, Nullable<int> courseid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddInstructor", personidParameter, courseidParameter);
        }
    
        public virtual int AddMajor(Nullable<int> personid, Nullable<int> majorid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var majoridParameter = majorid.HasValue ?
                new ObjectParameter("majorid", majorid) :
                new ObjectParameter("majorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMajor", personidParameter, majoridParameter);
        }
    
        public virtual ObjectResult<AddNewCourse_Result> AddNewCourse(string coursetitle, Nullable<byte> credit, string coursedepartment, Nullable<short> capacity, string termseason, Nullable<short> termyear, Nullable<int> personid, string roomlocation, string buildingname, Nullable<short> roomcap, Nullable<byte> day_, Nullable<short> stime, Nullable<short> etime)
        {
            var coursetitleParameter = coursetitle != null ?
                new ObjectParameter("coursetitle", coursetitle) :
                new ObjectParameter("coursetitle", typeof(string));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("credit", credit) :
                new ObjectParameter("credit", typeof(byte));
    
            var coursedepartmentParameter = coursedepartment != null ?
                new ObjectParameter("coursedepartment", coursedepartment) :
                new ObjectParameter("coursedepartment", typeof(string));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("capacity", capacity) :
                new ObjectParameter("capacity", typeof(short));
    
            var termseasonParameter = termseason != null ?
                new ObjectParameter("termseason", termseason) :
                new ObjectParameter("termseason", typeof(string));
    
            var termyearParameter = termyear.HasValue ?
                new ObjectParameter("termyear", termyear) :
                new ObjectParameter("termyear", typeof(short));
    
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var roomlocationParameter = roomlocation != null ?
                new ObjectParameter("roomlocation", roomlocation) :
                new ObjectParameter("roomlocation", typeof(string));
    
            var buildingnameParameter = buildingname != null ?
                new ObjectParameter("buildingname", buildingname) :
                new ObjectParameter("buildingname", typeof(string));
    
            var roomcapParameter = roomcap.HasValue ?
                new ObjectParameter("roomcap", roomcap) :
                new ObjectParameter("roomcap", typeof(short));
    
            var day_Parameter = day_.HasValue ?
                new ObjectParameter("day_", day_) :
                new ObjectParameter("day_", typeof(byte));
    
            var stimeParameter = stime.HasValue ?
                new ObjectParameter("stime", stime) :
                new ObjectParameter("stime", typeof(short));
    
            var etimeParameter = etime.HasValue ?
                new ObjectParameter("etime", etime) :
                new ObjectParameter("etime", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddNewCourse_Result>("AddNewCourse", coursetitleParameter, creditParameter, coursedepartmentParameter, capacityParameter, termseasonParameter, termyearParameter, personidParameter, roomlocationParameter, buildingnameParameter, roomcapParameter, day_Parameter, stimeParameter, etimeParameter);
        }
    
        public virtual ObjectResult<AddNewPerson_Result> AddNewPerson(string fname, string mname, string lname, Nullable<byte> roleid)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var mnameParameter = mname != null ?
                new ObjectParameter("mname", mname) :
                new ObjectParameter("mname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("roleid", roleid) :
                new ObjectParameter("roleid", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddNewPerson_Result>("AddNewPerson", fnameParameter, mnameParameter, lnameParameter, roleidParameter);
        }
    
        public virtual int AlterCap(Nullable<int> courseid, Nullable<int> newcap)
        {
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            var newcapParameter = newcap.HasValue ?
                new ObjectParameter("newcap", newcap) :
                new ObjectParameter("newcap", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AlterCap", courseidParameter, newcapParameter);
        }
    
        public virtual int AlterTime(Nullable<int> courseid, Nullable<int> newstart, Nullable<int> newend)
        {
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            var newstartParameter = newstart.HasValue ?
                new ObjectParameter("newstart", newstart) :
                new ObjectParameter("newstart", typeof(int));
    
            var newendParameter = newend.HasValue ?
                new ObjectParameter("newend", newend) :
                new ObjectParameter("newend", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AlterTime", courseidParameter, newstartParameter, newendParameter);
        }
    
        public virtual ObjectResult<CheckConflict_Result> CheckConflict(Nullable<int> courseid, Nullable<int> personid)
        {
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckConflict_Result>("CheckConflict", courseidParameter, personidParameter);
        }
    
        public virtual int DeleteCourse(Nullable<int> courseid)
        {
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCourse", courseidParameter);
        }
    
        public virtual ObjectResult<string> DropClassFromSchedule(Nullable<int> personid, Nullable<int> courseid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DropClassFromSchedule", personidParameter, courseidParameter);
        }
    
        public virtual ObjectResult<string> RemoveFromHoldList(Nullable<int> personid, Nullable<int> courseid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RemoveFromHoldList", personidParameter, courseidParameter);
        }
    
        public virtual int RemoveInstructor(Nullable<int> personid, Nullable<int> courseid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveInstructor", personidParameter, courseidParameter);
        }
    
        public virtual int RemoveMajor(Nullable<int> personid, Nullable<int> majorid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var majoridParameter = majorid.HasValue ?
                new ObjectParameter("majorid", majorid) :
                new ObjectParameter("majorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveMajor", personidParameter, majoridParameter);
        }
    
        public virtual ObjectResult<string> RemovePerson(Nullable<int> personid, Nullable<int> currenttermid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var currenttermidParameter = currenttermid.HasValue ?
                new ObjectParameter("currenttermid", currenttermid) :
                new ObjectParameter("currenttermid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RemovePerson", personidParameter, currenttermidParameter);
        }
    
        public virtual ObjectResult<string> SwitchRoles(Nullable<int> personid, Nullable<int> newroleid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            var newroleidParameter = newroleid.HasValue ?
                new ObjectParameter("newroleid", newroleid) :
                new ObjectParameter("newroleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SwitchRoles", personidParameter, newroleidParameter);
        }
    }
}
